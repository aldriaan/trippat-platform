name: Deploy to AWS

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install backend dependencies
      run: npm install

    - name: Install admin dependencies
      run: |
        cd trippat-admin
        npm install

    - name: Install customer dependencies
      run: |
        cd trippat-customer
        npm install

    - name: Run backend tests
      run: npm test
      env:
        MONGODB_URI: mongodb://localhost:27017/trippat_test
        JWT_SECRET: test-secret
        NODE_ENV: test

    - name: Build admin dashboard
      run: |
        cd trippat-admin
        npm run build

    - name: Build customer app
      run: |
        cd trippat-customer
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd trippat-admin && npm install
        cd ../trippat-customer && npm install

    - name: Build applications
      run: |
        cd trippat-admin && npm run build
        cd ../trippat-customer && npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2
      run: |
        # Create deployment package
        tar -czf trippat-deploy.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.env \
          --exclude=uploads \
          .

        # Copy to S3 for transfer
        aws s3 cp trippat-deploy.tar.gz s3://${{ secrets.DEPLOYMENT_BUCKET }}/

        # Execute deployment script on EC2
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /var/www/trippat",
            "aws s3 cp s3://${{ secrets.DEPLOYMENT_BUCKET }}/trippat-deploy.tar.gz .",
            "tar -xzf trippat-deploy.tar.gz",
            "npm install --only=production",
            "cd trippat-admin && npm install --only=production",
            "cd ../trippat-customer && npm install --only=production",
            "pm2 restart ecosystem.config.js"
          ]'

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level high
        cd trippat-admin && npm audit --audit-level high
        cd ../trippat-customer && npm audit --audit-level high

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run performance tests
      run: |
        # Install Artillery for load testing
        npm install -g artillery
        
        # Run load tests (you'll need to create artillery config)
        # artillery run artillery-config.yml